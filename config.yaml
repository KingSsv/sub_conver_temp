# 机场订阅
proxy-providers:
  机场1:
    url: ""
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    override:
      udp: true
      skip-cert-verify: true
  机场2:
    url: ""
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    override:
      udp: true
      skip-cert-verify: true

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: false
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: false
  auto-redirect: false
  auto-detect-interface: false

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
    - "*.services.googleapis.cn"
    - "*.xn--ngstr-lra8j.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

#策略组
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 低倍率节点, ♻️ 自动选择, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}
  - {name: 📹 YouTube, type: select, proxies:  [🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}
  - {name: 🍀 Google, type: select, proxies: [🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}
  - {name: 🤖 ChatGPT, type: select, proxies: [♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🌐 全部节点, 直连]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}
  - {name: 🐬 OneDrive, type: select, proxies: [直连, 🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点]}
  - {name: 🌐 Microsoft, type: select, proxies: [直连, 🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点]}
  - {name: 🎵 TikTok, type: select, proxies: [♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🌐 全部节点, 直连]}
  - {name: 📲 Telegram, type: select, proxies: [🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 默认代理, ♻️ 香港节点, ♻️ 日本节点, ♻️ 新加坡节点, ♻️ 美国节点, 🔯 故障转移, 🌐 全部节点, 直连]}


  - {name: ♻️ 香港节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?=.*香港).*$"}
  - {name: ♻️ 日本节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?=.*日本).*$"}
  - {name: ♻️ 美国节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?=.*美国).*$"}
  - {name: ♻️ 新加坡节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?=.*新加坡).*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?!.*(?:直连|x3|每月|机场)).*$"}
  - {name: ♻️ 低倍率节点, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^(?=.*(?:x0.1|0.1x)).*$"}
  - {name: 🌐 全部节点, type: select, include-all: true, filter: "^(?!.*(?:直连|x3|每月|机场)).*$"}
  - {name: 🔯 故障转移, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "^(?!.*(?:直连|x3|每月|机场)).*$"}

# 规则匹配
rules:
  - RULE-SET,speedtest_domain,🚀 默认代理
  - RULE-SET,directlite,直连
  - RULE-SET,private_ip,直连
  - RULE-SET,private_domain,直连
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🌐 Microsoft
  - RULE-SET,apple_domain,直连
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,apple_ip,直连,no-resolve
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,直连
  - RULE-SET,cn_ip,直连
  - RULE-SET,ad_block,REJECT
  - RULE-SET,app_purify,REJECT
  - RULE-SET,adblock,REJECT
  - RULE-SET,adblock1,REJECT
  - RULE-SET,privacy,REJECT
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  directlite: { <<: *class, url: "https://raw.githubusercontent.com/KingSsv/sub_conver_tem/refs/heads/main/Direct.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/KingSsv/sub_conver_tem/refs/heads/main/Proxy.list"}
  ai: {  <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  private_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  apple_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs"}
  ad_block: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"}
  app_purify: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list"}
  adblock: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyList.list"}
  adblock1: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list"}
  privacy: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyPrivacy.list"}
